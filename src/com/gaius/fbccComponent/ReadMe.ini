; this is an INI file
The main entry point is the file /config/services.xml.
        <InterfacesService>
            <classname>com.misys.portal.interfaces.services.XMLConfigurationInterfacesService</classname>
            <encoding>ISO-8859-1</encoding>
            <components>/config/interfaces/components.xml</components>
            <interfaces>/config/interfaces/interfaces.xml</interfaces>
            <earlyInit>true</earlyInit>
        </InterfacesService>

/config/ interfaces/components.xml  Load all componenets
        components.xml The master component registry file.
        base_components.xml Generic and common components.
        collaboration_components.xml Collaboration oriented components.
        openaccount_components.xml Components pertaining to the Open Account feature.
        tsu_components.xml Components of the TSU console feature.
        incoming_components.xml: Components used in the incoming interfaces.
        mobi_components.xml: Components of the MHUB end-to-end connectivity.
        local_services_components.xml: Components of the ERP feature.
        client_components.xml: Extension file for client customization.

/config/interfaces/interfaces.xml   Loads all Interfaces
        interfaces.xml: It is the master interface registry file. It declares global properties and core bundles. Additional files are included here.
        base_interfaces.xml: It declares core interfaces.
        collaboration_interfaces.xml: It declares collaboration oriented bundles and interfaces.
        openaccount_bundles.xml: It declares Open Account oriented bundles.
        openaccount_interfaces.xml: It declares Open Account oriented interfaces.
        retro_interfaces.xml: It declares legacy V3 interfaces.
        opics_interfaces.xml: It declares Opics related interfaces.
        mobi_interfaces.xml: It declares MHUB related interfaces.
        local_services_interfaces.xml: It declares ERP related interfaces.
        tsu_interfaces.xml: It declares TSU console related interfaces.
        client_interfaces.xml: It declares client-specific interfaces for customization.

Steps to create and implement a user defined Interface
1. Identify the Bundle or Action Code that is triggered by FBCC when the event happens. You can see the ActionCodes from 
    a.\war\WEB-INF\classes\core\url for core ActionCode and \war\WEB-INF\classes\trade\url for trade ActionCode
    b. interfaces.xml 
    Any user action on the Portal can be linked to an interface. This is done by creating a new bundle declaration in the interface registry with the action code. Whenever the user action happens on the Portal, all the interfaces linked to the bundle are triggered.
# Jurisdiction Maintenance
 ActionCode         Description
OpenChangeRoleBSF = List of Roles
OpenSaveRoleBSF = Save Role
OpenSaveNewRoleBSF = Save Role
OpenDeleteRoleBSF = Delete Role
OpenDisplayRoleBSF = Display Role
OpenModifyRoleBSF = Modify Role
OpenAddRoleBSF = Add Role
OpenEditRoleBSF = Edit Role
OpenChangeAuthorisationBSF = Existing Authorisation Setup
OpenSaveAuthorisationBSF = Save User's Authorisation
OpenSaveNewAuthorisationBSF = Save new User's Authorisation
OpenDeleteAuthorisationBSF = Delete User's Authorisation
OpenDisplayAuthorisationBSF = Display User's Authorisation
OpenModifyAuthorisationBSF = Modify User's Authorisation
OpenAddAuthorisationBSF = Add User's Authorisation

2. Identify the Source Event

3. Identify the Interface

4. Identify the Components

Implementation
When we are going to implement, we will use a bottom-up approach. We will first 
create the new components, then create a new interface with all components and then configure the bundle to trigger this new interface.


